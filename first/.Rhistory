levels(ls_pop$population)
as.numeric(levels(ls_pop$population)[as.integer(ls_pop)])
as.numeric(levels(ls_pop$population)[as.integer(ls_pop$population)])
levels(ls_pop$population)
as.numeric(levels(ls_pop$population))
mode(ls_pop)
as.matrix(ls_pop$population)
df_population  = as.matrix(ls_pop$population)
mean(df_population)
df_population[1]
numeric(df_population)
numeric(df_population[1])
as.numeric(df_population)
help(eval)
sapply(parse(text=df_population),eval)
apply(df_population,2,as.numeric)
sapply(df_population,as.numeric)
sapply(df_population[[1]],as.numeric)
sapply(df_population[1],as.numeric)
sapply(df_population,as.numeric)
df_pop
df_population
mode(df_population)
lapply(df_population,as.numeric)
dapply
help(apply)
df_pop
mode(df_population)
as.matrix(df_population)
apply(as.matrix(df_population),as.numeric)
m_population = as.matrix(df_population)
apply(m_population,as.numeric)
apply(m_population,2,as.numeric)
m_population
m_population[333]
m_population[1000]
as.numeric(m_population[1000])
apply(m_population,2,as.numeric)
s <- c("fdjas_1","faefifaheiafh_3")
s1 <- sapply(strsplit(s, split = '_',fixed = TRUE), function(x) (x[2]))
s1
help(function(x))
help(function
)
help(function())
help(function
d
help(function)
df_population
l_pop
l_pop <- sapply(strsplit(df_population) function(x) x[1])
c(32, 21, 1)[3]
l_pop <- sapply(strsplit(df_population,split = ',',fixed = FALSE), function(x) x[1])
l_pop
l_pop <- sapply(strsplit(df_population,split = ',',fixed = FALSE), function(x) paste(x[1],x[2]))
l_pop
s <- "dc235"
gsub("[a-z]","",s)
l_pop <- sapply(gsub(,",","",df_population), function(x) paste(x[1],x[2]))
l_pop <- sapply(gsub(,"\,","",df_population), function(x) paste(x[1],x[2]))
l_pop <- sapply(gsub(,',',"",df_population), function(x) paste(x[1],x[2]))
l_pop <- sapply(gsub(,',','',df_population), function(x) paste(x[1],x[2]))
l_pop <- sapply(gsub(',','',df_population), function(x) paste(x[1],x[2]))
l_pop
df_population
l_pop
l_pop <- sapply(gsub(',','',df_population))
l_pop <- sapply(gsub(',','',df_population),function(x),x[1])
l_pop <- sapply(gsub(',','',df_population),function(x) x[1])
l_pop
as.numeric(l_pop)
n_pop = as.numeric(l_pop)
n_pop
c
mean(n_pop)
getwd()
print(getwd())
#set path(path have been already set)
print(getwd())
#set libraries
#ls_pop is list of factors
library()
.package()
.packages()
.packages()
search()
gdata
help(gdata)
search()
help(search())
help(search
)
package(gdata)
packages(gdata)
path
getwd()
setwd(path)
getwd()
con
setwd(file.path(path,"first"))
getwd(9)
getwd()
save.image("~/Documents/R_programmes/first/till_get_numeric_population.RData")
ls()
rm(list = ls())
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library('gdata') #to read xls data
population = gdata.read.xls("2015_population.xls")
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library('gdata') #to read xls data
population = gdata::read.xls("2015_population.xls")
population
population
library('gdata')
population = gdata::read.xls("2015_population.xls")
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library("gdata") #to read xls data
population = gdata::read.xls("2015_population.xls")
population = read.xls("2015_population.xls")
install.packages("gdata")
install.packages("gdata")
population
population['人口']
population.columns
population.index
population[c("X.5","X.6","X.7")]
population["X.5"]
population["X.5"][0]
population["X.5"][1]
population["X.5"][2]
population = population[c("X.5","X.6","X.7")] #delete useless columns
mode(population)
str(population)
View(population)
population.head()
population[12]
population[[1]][12]
names(population)
c_name = ["state","city","population"]
c_name = c("state","city","population") #to set columns name
names<-(population,c_name)
'names<-'(population,c_name)
str(population)
names(population)
'names<-'(population,c_name)
names(population)
names(ls_pop) <- c_name
names(population) <- c_name
names(population)
head(population,12:15)
as.list(population)
as.list(population)[3]
head(population,3)
head(population,10)
head(population,12,length(ls_pop[[1]]))
length(population[[1]])
head(population,12,length(population[[2]]))
head(population,12:length(population[[2]]))
head(population,12:length(population[[1]]))
length(population[[1]])
12:length(population[[1]])
population[12:length(population[[2]]),]
population[11:length(population[[2]]),]
library(help = "xtable")
library(help = "gdata")
ls()
write.csv(population,"2015_population_modified.csv")
population = population[11:length(population[[2]]),]
write.csv(population,"2015_population_modified.csv")
#shi
population2 = read.csv("2015_population_modified.csv",header = TRUE)
str(population2)
population
population2
mode(population2$population)
mean(population2$population)
population2$population[2]
population2$population[2] + population2$population[2]
mode(population2$population[2])
population2$population[2] +3
population2$population[2]
as.numeric(population2$population[2])
population2$population[3]
population2$population[5]
as.numeric(population2$population[5])
str(population2)
str(population)
summary(population)
summary(population2)
sapply(gsub(',','',population$population))
sapply(gsub(',','',population$population),function(x) x[1])
help(sapply)
function(y) y[1]
population$population = sapply(gsub(',','',population$population),function(x) x[1])
mean(population$population)
population$population
mean(as.numeric(population$population))
population$population = as.numeric(population$population)#to change character d-type into numeric d-type
str(population)
head(population,10)
summary(population)
as.table(population)
table(population$state)
table(population$state,populatiokn$city)
table(population$state,population$city)
rep(3,10)
rep(c("A","b","C"),10)
rep(c("A","b","C"),1)
rep(c("A","b","C"),2)
b = factor(rep(c("A","b","C"),2))
d = factor(rep(c("A","b","C"),2),levels = c("a","b","c","d","e"))
d
table(d)
d
d
d = factor(rep(c("A","b","C"),2),levels = c("A","b","C","D","E"))
d
table(d)
table(b,d)
b
table(b)
population
subset(population)
?subset
subset(population, population$population <50000)
subset(population, population$population <50000, select = population$population)
subset(population, population$city == "三種町", select = population$population)
population$city
subset(population, population$city == "三種町", select = population$population)
subset(population, city == "三種町", select = population$population)
subset(population, population$city == "三種町")
subset(population, city == "三種町")
subset(population, population < 20000)
install.packages("treemap")
ok
help(treeplot)
package(treeplot)
library(treemap)
package(igraph)
library(igraph)
install.packages('igraph')
library('igraph')
library('igraph')
install.packages('igraph')
install.packages('igraph')
install.packages("libxml2")
install.packages("libxml2-dev")
install.packages("libxml2-devs")
install.packages("igraph")
version
igraph
package('igraph')
library(treemap)
# Create data
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
# Custom labels:
treemap(data, index=c("group","subgroup"),     vSize="value", type="index",
fontsize.labels=c(15,12),                # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...
fontcolor.labels=c("white","orange"),    # Color of labels
fontface.labels=c(2,1),                  # Font of labels: 1,2,3,4 for normal, bold, italic, bold-italic...
bg.labels=c("transparent"),              # Background color of labels
align.labels=list(
c("center", "center"),
c("right", "bottom")
),                                   # Where to place labels in the rectangle?
overlap.labels=0.5,                      # number between 0 and 1 that determines the tolerance of the overlap between labels. 0 means that labels of lower levels are not printed if higher level labels overlap, 1  means that labels are always printed. In-between values, for instance the default value .5, means that lower level labels are printed if other labels do not overlap with more than .5  times their area size.
inflate.labels=F,                        # If true, labels are bigger when rectangle is bigger.
)
group = c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
group
help(paste)
subgroup = paste("subgroup",c(1,2,3,4,1,2,1,2,3),sep="-")
value = c(13,5,22,12,11,7,3,1,23)
data = data.frame(group,subgroup,value)
data
treemap(data,index=c("group","subgroup"), vSize="valu",type = "index",fontsize.labels=c(15,12),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels=c("transparent"),align.labels=list(c("center","center"),c("right","bottom")),)
treemap(data,index=c("group","subgroup"), vSize="valu",type = "index",fontsize.labels=c(15,12),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels=c("transparent"),align.labels=list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
treemap(data,index=c("group","subgroup"), vSize="value",type = "index",fontsize.labels=c(15,12),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels=c("transparent"),align.labels=list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
treemap(data,index=c("group","subgroup"), vSize="value",type = "index",fontsize.labels=c(15,12),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels=c("transparent"),align.labels=list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
treemap(data,index=c("group","subgroup"), vSize="value",type = "index",fontsize.labels=c(15,12),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels=c("transparent"),align.labels=list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
str(population)
str(data)
treemap(population,index=c("state","city"),vSize="population")
treemap(population,index=c("population$state","city"),vSize="population",)
head(population)
population_without_allState
population_without_allState = population[12:length(population[[2]])]
population[12:length(population)]
length(population[[1]])
length(population[[2]])
population[1]
population[length(population[[1]]) -1:length(population[[1]]),]
population_without_allState <- population[12:length(population[[1]]),]
length(population_without_allState[[1]])
length(population[[1]])
head(population_without_allState)
treemap(population_without_allState,index=c("state","city"), title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
population$state
population$state[1]
mode(population$state[1])
par(family("HiraKakuProN-W3"))
par(family = "HiraKakuProN-W3")
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
theme_bw(base_family = "HiraKakuProN-W3")
library(ggplot2)
theme_bw(base_family = "HiraKakuProN-W3")
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,)
?theme_bw
theme_bw(base_family = "HiraKakuProN-W3")
theme_bw(family = "HiraKakuProN-W3")
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,) + theme_bw(base_family = "HiraKakuPro-W3")
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F,) + theme_bw(base_family = "HiraKakuPro-W3") + theme_gray (base_family = "HiraKakuPro-W3")
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(5,3),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",fontfamily.legend = "HiraKakuPro-W3" )
treemap(population_without_allState,index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",fontfamily.legend = "HiraKakuPro-W3" )
subset(population, state == city)
help subset
help(subset)
str(population)
population$state
population$city
length(population$city)
length(population$state)
subset(population, state == city, select = c("population"))
head(population)
levels(population)
levels(population$state)
levels(population$city)
levels(population$state)
subset(population level(population$state) == level(population$city))
subset(population,level(population$state) == level(population$city))
subset(population,levels(population$state) == levels(population$city))
subset(population,levels(state) == levels(city))
subset(population,levels(state) in levels(city))
subset(population,all(levels(state) %in% levels(city)))
subset(population,any(levels(state) %in% levels(city)))
subset(population,any(city %in% levels(state)))
subset(population,all(city %in% levels(state)))
rownames(population)
rownames_population <- rownames(population)
grep(levels(population$state), population$city)
apply(population,1,function(.row) any((state == city )))
apply(population,1,function(.row) any((population$state == population$city )))
apply(population,1,function(.row) any((.row[population$state] == .row[population$city])))
apply(population,1,function(.row) any((.row[levels(population$state)] == .row[population$city])))
apply(population,1,function(.row) any((.row[levels(population$state)] == .row[levels(population$city)])))
levels(population$state)
states = levels(population$state)
match("岡山県",states)
"岡山県" %in% states
subset(population, city %in% states)
subset(population, city !%in% states)
subset(population, city %!in% states)
subset(population, !(city %in% states))
population_without_allState <- subset(population,!(population %in% states))
head(population)
head(population_without_allState)
population_without_allState <- subset(population,!(city %in% states))
head(population_without_allState)
exclamation
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3" )
sapply(population_without_allState,mean)
sapply(population_without_allState$population,mean)
length(population$population)
sapply(population_without_allState$population,mean) == mean(population_without_allState$population)
mean(population_without_allState%population)
group_by
library(dplyr)
install.packages("dplyr")
group_by
library(dplyr)
group_by(population_without_allState&state)
group_by(population_without_allState&states)
group_by(population_without_allState&state, state)
group_by(population_without_allState&state, states)
group_by(population_with_allState, states)
population_without_allState$state
group_by(population_with_allState, states)
group_by(population_without_allState, states)
group_by(population_without_allState, population)
mode(group_by(population_without_allState,states))
mode(group_by(population_without_allState,state))
group_by(population_without_allState,state)
p <- group_by(population_without_allState,state)
str(p)
@
p
mode(p)
p[1]
@[2]
p[2]
p[3]
p
p["state"]
p["state"]
mean(p)
mean(p["population"])
p["population"]
summarise(p,mean)
summarise(p,mean(population))
means_perState <- summarise(p,mean(population))
head(means_perState,29)
means_perState
means_perState[1]
means_perState[c(1,10)]
means_perState[c(1:10)]
c(1:10)
means_perState(1)
means_perState[10]
means_perState[[1]]
names(means_perState)
print(means_perState)
View(means_perState)
library(dplyr)
group_by(population_without_allState, population)
p
summarise(group_by_state, mean(population))
summarise(p, mean(population))
summarise(p,range(population))
summarise(p,max(population))
summarise(p,v(population))
summarise(p,str(population))
summarise(p,std(population))
summarise(p,IQR(population))
summarise(p,range(population))
summarise(p,var(population))
summarise(p,sqrt(population))
summarise(p,sqrt(variance(population)))
summarise(p,sqrt(var(population)))
summarise(p,sqrt(var(population)))
var(population)
summarise(p,sqrt(var(population)))
stds_per_state = summarise(p,sqrt(var(population)))
means_per_state = summarise(p,mean(population))
as.matrix(means_per_state,stds_per_state)
data.frame(c(means_per_state,stds_per_state))
join()
data.frame(c(means_per_state,stds_per_state),names <- c(state,means_per_state,stds_per_state))
data.frame(c(means_per_state,stds_per_state),names <- c(population$state,means_per_state,stds_per_state))
data.frame(c(means_per_state,stds_per_state),names <- c(state,means_per_state,stds_per_state))
data.frame(c(means_per_state,stds_per_state),names <- c("state",means_per_state,stds_per_state))
data.frame(c(means_per_state,stds_per_state),names <- c("state","means_per_state","stds_per_state"))
columns_names = names(means_per_state)
columns_names
mode(columns_names)
columns_names[2]
data.frame(c(means_per_state,stds_per_state),names <- c("state",mean(population),sqrt(var(population))))
length(state)
length(population$state)
states
length(group_by_state)
length(p)
p
str(p)
p
summarise(p,sqrt(var(population)))
summarise(p,sqrt(var(population)))['state']
mode(summarise(p,sqrt(var(population))))
states <- summarise(p,sqrt(var(population)))
data.frame(c(means_per_state,stds_per_state),names <- c(state,means_per_state,stds_per_state))
data.frame(c(means_per_state,stds_per_state),names <- c(states,means_per_state,stds_per_state))
merge(means_per_state,stds_per_state,by = state)
merge(means_per_state,stds_per_state,by = "state")
representative_value <-merge(means_per_state,stds_per_state,by = "state")
names(representative_value)<-c('state','mean', 'std')
representative_value
colors()
pallet()
palette()
rainbow(6,
s = 0.5)
rainbow(47,
s = 0.5)
rainbow_color <- rainbow(47,s=0.5)
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color )
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(4,1))
rainbow_color <- rainbow(47,s=0.2)
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
rainbow_color <- rainbow(47,s=0.4)
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
