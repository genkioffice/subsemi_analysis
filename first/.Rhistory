sprintf("Mean of the population per city: %f/n Variance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
sprintf("Mean of the population per city: %f\n Variance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
sprintf("Mean of the population per city: %f\nVariance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
A = sprintf("Mean of the population per city: %f\nVariance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
cat(A)
tmp = sprintf("Mean of the population per city: %f \n\t Variance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
tmp = sprintf("Mean of the population per city: %f \n Variance of the population per city: %f
\n Std of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
tmp = sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
population = read.xls("2015_population.xls")
View(population)
population = population[c("X.5","X.6","X.7","X.10")] #dataframe of 3 factors
c_name = c("state","city","population","trends") #to set columns name
names(population) <- c_name
print(names(population))
population <- population[11:length(population[[2]]),] #delete useless values
head(population)
population <- population[11:length(population[[2]]),] #delete useless values
population$population = sapply(gsub(',','',population$population),function(x) x[1]) # to eliminate comma on population column
population$population = as.numeric(population$population)#to change character d-type into numeric d-type
states = population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
variance = function(x) var(x) * (length(x)-1)/length(x)
city_mean = mean(population_without_allState$population)
city_var = variance(population_without_allState$population)
city_std = sqrt(city_var)
cumprod(c(3,3,3))
c(3,3,3)
type(c(3,3,3))
mode(c(3,3,3))
cumprod(c(3,3,3))
cumprod(population_without_allState$trends)
cumprod(population_without_allState$trends.value)
population_without_allState$trends
population_without_allState$trends.levels
summarise(population_without_allState,mean(trends))
summarise(group_by_state,mean(trends))
group_by_state <- group_by(population_without_allState,state)
summarise(group_by_state,mean(trends))
warnings()
population$trends = sapply(gsub(',','',population$trends),function(x) x[1])
population$trends = as.numeric(population$trends)
states = population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
variance = function(x) var(x) * (length(x)-1)/length(x)
summarise(group_by_state,mean(trends))
summarise(group_by_state,mean(trend))
summarise(group_by_state,mean(trends))
#notice: you may have to install ggplot2 & treemap and some related libraries by yourself
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library(gdata) #to read xls data
library(treemap) #to use treemap plot
library(dplyr) #to use great data modify function, like group_by
#load data
population = read.xls("2015_population.xls")
#delete useless columns
population = population[c("X.5","X.6","X.7","X.10")] #dataframe of 3 factors
c_name = c("state","city","population","trends") #to set columns name
names(population) <- c_name
print(names(population))
#modify population column
population <- population[11:length(population[[2]]),] #delete useless values
population$population = sapply(gsub(',','',population$population),function(x) x[1]) # to eliminate comma on population column
population$population = as.numeric(population$population)#to change character d-type into numeric d-type
#modify trends column
population$trends = sapply(gsub(',','',population$trends),function(x) x[1])
population$trends = as.numeric(population$trends)
#make treemap
states = population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
#create function to compute variance
variance = function(x) var(x) * (length(x)-1)/length(x)
#statistical features in whole Japan
city_mean = mean(population_without_allState$population)
city_var = variance(population_without_allState$population)
city_std = sqrt(city_var)
tmp = sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
#collect statistical features
group_by_state <- group_by(population_without_allState,state)
means_per_state <- summarise(group_by_state, mean(population))
variance_per_state <- summarise(group_by_state,variance(population))
stds_per_state <- summarise(group_by_state,sqrt(variance(population)))
representative_values <- merge(means_per_state,variance_per_state,by = "state")
representative_values <- merge(representative_values,stds_per_state,by="state")
names(representative_values) <- c('state','mean', 'variance','std')
print(representative_values)
#dig into trend column
trend_mean <- population_without_allState$trends
summarise(group_by_state,mean(trends))
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
summarise(group_by_state,geo_mean(trends))
a = summarise(group_by_state,geo_mean(trends))
print(a)
a
View(a)
population$trends + 100
(population$trends + 100)/100
ration_of_4q_change <- (population$trends + 100)/100
geo_mean(ratition_of_4q_change)
geo_mean(ration_of_4q_change)
#notice: you may have to install ggplot2 & treemap and some related libraries by yourself
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library(gdata) #to read xls data
library(treemap) #to use treemap plot
library(dplyr) #to use great data modify function, like group_by
#load data
population = read.xls("2015_population.xls")
#delete useless columns
population = population[c("X.5","X.6","X.7","X.10")] #dataframe of 3 factors
c_name = c("state","city","population","trend") #to set columns name
names(population) <- c_name
print(names(population))
#modify population column
population <- population[11:length(population[[2]]),] #delete useless values
population$population = sapply(gsub(',','',population$population),function(x) x[1]) # to eliminate comma on population column
population$population = as.numeric(population$population)#to change character d-type into numeric d-type
#modify trend column
population$trend = sapply(gsub(',','',population$trend),function(x) x[1])
population$trend = as.numeric(population$trend)
#make treemap
states = population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
#create function to compute variance
variance = function(x) var(x) * (length(x)-1)/length(x)
#statistical features in whole Japan
city_mean = mean(population_without_allState$population)
city_var = variance(population_without_allState$population)
city_std = sqrt(city_var)
tmp = sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
#collect statistical features
group_by_state <- group_by(population_without_allState,state)
means_per_state <- summarise(group_by_state, mean(population))
variance_per_state <- summarise(group_by_state,variance(population))
stds_per_state <- summarise(group_by_state,sqrt(variance(population)))
representative_values <- merge(means_per_state,variance_per_state,by = "state")
representative_values <- merge(representative_values,stds_per_state,by="state")
names(representative_values) <- c('state','mean', 'variance','std')
print(representative_values)
# create function to compute geometric mean
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
#dig into trend column
trend = (population_without_allState$trend + 100)/100
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
scalled_trend = (population_without_allState$trend + 100)/100
scalled_trend
geo_mean(scalled_trend)
trend = (population_without_allState$trend + 100)/100
mean_whole_trend = geo_mean(scalled_trend)
tmp = sprintf("The mean year on year rate of the population: %f",mean_whole_trend)
cat(tmp)
geo_mean(scalled_trend)
mean_whole_trend = geo_mean(scalled_trend)
tmp = sprintf("The mean year on year rate of the population: %f",mean_whole_trend)
cat(tmp)
geo_var <- function(x) (length(x)-1)/length(x) * ((x - geo_mean(x))^2)
geo_var(population_without_allState$trend)
geo_mean(population_without_allState$trend)
geo_var <- function(x) (length(x)-1)/length(x) * (sum((x - geo_mean(x))^2))
geo_var(population_without_allState$trend)
mean_whole_trend = geo_mean(scalled_trend)
mean_whole_trend
geo_var(scalled_trend)
variance(scalled_trend)
tmp = sprintf("The mean year on year rate of the population: %f\nThe variance year on year rate of the population: %f\nThe std year on year rate of the population: %f",mean_whole_trend,variance_whole_trend,std_whole_trend)
variance_whole_trend = geo_var(scalled_trend)
std_whole_trend = sqrt(variance_whole_trend)
tmp = sprintf("The mean year on year rate of the population: %f\nThe variance year on year rate of the population: %f\nThe std year on year rate of the population: %f",mean_whole_trend,variance_whole_trend,std_whole_trend)
cat(tmp)
mean_trend_perState = summarise(group_by_state,geo_mean(trend))
mean_trend_perState
scalled_trend
mean_trend_perState = summarise(group_by_state,geo_mean(scalled_trend))
mean_trend_perState
group_by_state
group_by_state$trend <- scalled_trend
group_by_state
mean_trend_perState = geo_mean(scalled_trend)
mean_trend_perState
geo_var(scalled_trend)
mean_trend_perState = geo_mean(group_by_state$trend)
mean_trend_perState
geo_var(group_by_state$trend)
group_by_state
group_by_state$trend
geo_var(group_by_state$trend)
group_by_state$trend <- scalled_trend
mean_trend_perState <- geo_mean(group_by_state$trend)
variance_trend_perState <- geo_var(group_by_state$trend)
std_trend_perState <- sqrt(variance_trend_perState)
mean_trend_perState
trend
del(trend)
rm(trend)
trend
mean_trend_perState <- summarise(group_by_state,geo_mean(trend))
mean_trend_perState
representative_values2 = merge(mean_trend_perState,variance_trend_perState,by = state)
representative_values2 = merge(mean_trend_perState,variance_trend_perState,by = "state")
mmean_trend_perS
mean_trend_perState
str(mean_trend_perState)
variance_trend_perState
group_by_state
summarise(group_by_state,variance(trend_mean))
summarise(group_by_state,variance(trend))
summarise(group_by_state,geo_var(trend))
variance_trend_perState <- summarise(group_by_state,geo_var(trend))
std_trend_perState <- summarise(group_by_state,sqrt(geo_var(trend)))
representative_values2 = merge(mean_trend_perState,variance_trend_perState,by = "state")
representative_values2 = merge(representative_values2,std_trend_perState,by="state")
summarise(group_by_state,geo_var(trend))
representative_values2
names(representative_values2) <- c('state','mean', 'variance','std')
print(representative_values2)
city_std = sqrt(city_var)
list(ls)
ls()
rm(list = ls())
#notice: you may have to install ggplot2 & treemap and some related libraries by yourself
#set path(path have been already set)
print(getwd())
#set libraries
print(search())
library(gdata) #to read xls data
library(treemap) #to use treemap plot
library(dplyr) #to use great data modify function, like group_by
#load data
population <- read.xls("2015_population.xls")
#delete useless columns
population <- population[c("X.5","X.6","X.7","X.10")] #dataframe of 3 factors
c_name <- c("state","city","population","trend") #to set columns name
names(population) <- c_name
print(names(population))
#modify population column
population <- population[11:length(population[[2]]),] #delete useless values
population$population <- sapply(gsub(',','',population$population),function(x) x[1]) # to eliminate comma on population column
population$population <- as.numeric(population$population)#to change character d-type into numeric d-type
#modify trend column
population$trend <- sapply(gsub(',','',population$trend),function(x) x[1])
population$trend <- as.numeric(population$trend)
#make treemap
states <- population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
#create function to compute variance
variance <- function(x) var(x) * (length(x)-1)/length(x)
#statistical features in whole Japan
city_mean <- mean(population_without_allState$population)
city_var <- variance(population_without_allState$population)
city_std <- sqrt(city_var)
tmp <- sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
#collect statistical features
group_by_state <- group_by(population_without_allState,state)
means_per_state <- summarise(group_by_state, mean(population))
variance_per_state <- summarise(group_by_state,variance(population))
stds_per_state <- summarise(group_by_state,sqrt(variance(population)))
representative_values <- merge(means_per_state,variance_per_state,by = "state")
representative_values <- merge(representative_values,stds_per_state,by="state")
names(representative_values) <- c('state','mean', 'variance','std')
print(representative_values)
# create function to compute geometric mean
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
geo_var <- function(x) (length(x)-1)/length(x) * (sum((x - geo_mean(x))^2))
#dig into trend column
#whole trend
scalled_trend <- (population_without_allState$trend + 100)/100
mean_whole_trend <- geo_mean(scalled_trend)
variance_whole_trend <- geo_var(scalled_trend)
std_whole_trend <- sqrt(variance_whole_trend)
tmp <- sprintf("The mean year on year rate of the population: %f\nThe variance year on year rate of the population: %f\nThe std year on year rate of the population: %f",mean_whole_trend,variance_whole_trend,std_whole_trend)
cat(tmp)
#states' trend
group_by_state$trend <- scalled_trend
mean_trend_perState <- summarise(group_by_state,geo_mean(trend))
variance_trend_perState <- summarise(group_by_state,geo_var(trend))
std_trend_perState <- summarise(group_by_state,sqrt(geo_var(trend)))
#concatenation
representative_values2 <- merge(mean_trend_perState,variance_trend_perState,by = "state")
representative_values2 <- merge(representative_values2,std_trend_perState,by="state")
names(representative_values2) <- c('state','mean', 'variance','std')
print(representative_values2)
rm(list = ls())
close
getwd()
file.path(getwd(),'R_prog')
file.path(getwd(),'R_prog')
file.path(getwd(),'R_prog')
print(getwd())
file.path(getwd(),'Documents','R_programmes','first')
setwd("~/Documents/R_programmes/first")
setwd("~/Documents/R_programmes/first")
getwd()
ls()
print(search())
library(gdata) #to read xls data
library(treemap) #to use treemap plot
library(dplyr) #to use great data modify function, like group_by
population <- read.xls("2015_population.xls")
View(population)
population <- population[c("X.5","X.6","X.7","X.10")] #dataframe of 3 factors
c_name <- c("state","city","population","trend") #to set columns name
names(population) <- c_name
print(names(population))
population <- population[11:length(population[[2]]),] #delete useless values
population$population <- sapply(gsub(',','',population$population),function(x) x[1]) # to eliminate comma on population column
population$population <- as.numeric(population$population)#to change character d-type into numeric d-type
population$trend <- sapply(gsub(',','',population$trend),function(x) x[1])
population$trend <- as.numeric(population$trend)
states <- population$state #to reshape population dataframe
population_without_allState <- subset(population, !(city %in% states)) # delete rows where state and city have a same name
rainbow_color <- rainbow(47,s=0.4) #set colors
treemap(population_without_allState,
index=c("state","city"),vSize = "population", title = "Distribution of the population in Japan",type = "index",fontsize.labels = c(12,8),
fontcolor.labels = c("white","orange"),fontface.labels = c(2,1),bg.labels =c("transparent"),align.labels = list(c("center","center"),c("right","bottom")),
overlap.labels = 0.5,inflate.labels = F, fontfamily.title ="HiraKakuPro-W3", fontfamily.labels = "HiraKakuPro-W3",
fontfamily.legend = "HiraKakuPro-W3",palette = rainbow_color, border.lwds=c(1,1))
View(population_without_allState)
variance <- function(x) var(x) * (length(x)-1)/length(x)
city_mean <- mean(population_without_allState$population)
city_var <- variance(population_without_allState$population)
city_std <- sqrt(city_var)
tmp <- sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
sprintf("こんにちは！")
mode(sprintf("こんにちは！"))
tmp
cat(tmp)
tmp <- print("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
print(city_var)
print("city_var")
print("こんちは"+city_var)
print("こんちは"city_var)
tmp <- sprintf("Mean of the population per city: %f \nVariance of the population per city: %f\nStd of the population per city: %f",city_mean,city_var,city_std
)
cat(tmp)
group_by_state <- group_by(population_without_allState,state)
View(group_by_state)
means_per_state <- summarise(group_by_state, mean(population))
means_per_state
variance_per_state <- summarise(group_by_state,variance(population))
stds_per_state <- summarise(group_by_state,sqrt(variance(population)))
representative_values <- merge(means_per_state,variance_per_state,by = "state")
representative_values <- merge(representative_values,stds_per_state,by="state")
names(representative_values) <- c('state','mean', 'variance','std')
print(representative_values)
mode(representative_values)
representative_values
class(representative_values)
help(class)
help(mode)
View(group_by_state)
mode(group_by_state$state)
class(group_by_state$state)
mode(group_by_state$state)
geo_mean <- function(x) max(cumprod(x))^(1/length(x))
geo_var <- function(x) (length(x)-1)/length(x) * (sum((x - geo_mean(x))^2))
scalled_trend <- (population_without_allState$trend + 100)/100
scalled_trend
mean_whole_trend <- geo_mean(scalled_trend)
variance_whole_trend <- geo_var(scalled_trend)
std_whole_trend <- sqrt(variance_whole_trend)
tmp <- sprintf("The mean year on year rate of the population: %f\nThe variance year on year rate of the population: %f\nThe std year on year rate of the population: %f",mean_whole_trend,variance_whole_trend,std_whole_trend)
cat(tmp)
scalled_trend <- (population_without_allState$trend + 100)/100
mean_whole_trend <- geo_mean(scalled_trend)
variance_whole_trend <- geo_var(scalled_trend)
std_whole_trend <- sqrt(variance_whole_trend)
tmp <- sprintf("The mean year on year rate of the population: %f\nThe variance year on year rate of the population: %f\nThe std year on year rate of the population: %f",mean_whole_trend,variance_whole_trend,std_whole_trend)
cat(tmp)
group_by_state$trend <- scalled_trend
mean_trend_perState <- summarise(group_by_state,geo_mean(trend))
variance_trend_perState <- summarise(group_by_state,geo_var(trend))
std_trend_perState <- summarise(group_by_state,sqrt(geo_var(trend)))
representative_values2 <- merge(mean_trend_perState,variance_trend_perState,by = "state")
representative_values2 <- merge(representative_values2,std_trend_perState,by="state")
names(representative_values2) <- c('state','mean', 'variance','std')
print(representative_values2)
rm(list=ls())
ls()
a <- 3
ls()
rm(ls())
zeros <- numeric(5)
zeros
mode(zeros)
class(zeros)
ones(1,6)
rep(1,5)
seq(from=2, to=12, by=2)
seq(from=2, to=12, by=3)
z <- 1:5
z
class(z)
con(x,z)
c(x,z)
x <- seq(from=3,to=10,by=5)
c(x,z)
x
z
length(z)
x[3]
x[1]
[0]
x[0]
z
z[c(1,3)]
z[z>10]
z[z<10]
getwd()
cvdata <- read.csv("cv.csv")
head(cvdata)
str(cvdata)
str(cvdata)
cvdata$pop
cvdata$pop <- cvdata$pop * 100
cvdata$pop
dvdata2 <- subset(cvdata, gpp_pop >= 0.035)
cvdata$gpp_pop <- cvdata$gpp / cvdata$pop
str(cvdata)
cvdata2 <- subset(cvdata,gpp_pop >= 0.35)
length(cvdata2)
length(cvdata)
size(cvdata2)
head(cvdata2)
length(cvdata$pop)
length(cvdata2$pop)
cvdata3 <- cvdata[,c("pop","gpp","conv")]
cvdata3
str(cvdata3)
class(cvdata3)
class(class(cvdata3))
summary(cvdata3)
population = gdata::read.xls('2015_population.xls')
summary(cvdata3)
summary(population)
rm(list=ls())
cvdata <- read.csv("cv.csv",row.names=1)
help("read.csv")
names(cvdata)
cvdata2 <- read.csv("cv.csv")
names(cvdata2)
summary(cvdata)
summary(cvdata2)
cvdata3 <- read.csv("cv.csv",row.names = 5)
cvdata3 <- read.csv("cv.csv",row.names = 2)
cvdata3 <- read.csv("cv.csv",row.names = 1)
cvdata3 <- read.csv("cv.csv",row.names = 0)
cvdata3 <- read.csv("cv.csv",row.names = 110)
cvdata3 <- read.csv("cv.csv",row.names = 11)
names(cvdata3)
summary(cvdata3)
View(cvdata3)
View(cvdata)
search()
install.packages(read_excel)
install.packages('read_excel')
install.packages('readxl')
help(abline)
